/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define TOP     3

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        qq: qq {
            compatible = "zmk,behavior-mod-morph";
            label = "QQ";
            bindings = <&kp Q>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ww: ww {
            compatible = "zmk,behavior-mod-morph";
            label = "WW";
            bindings = <&kp W>, <&kp AT_SIGN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ee: ee {
            compatible = "zmk,behavior-mod-morph";
            label = "EE";
            bindings = <&kp E>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        rr: rr {
            compatible = "zmk,behavior-mod-morph";
            label = "RR";
            bindings = <&kp R>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        tt: tt {
            compatible = "zmk,behavior-mod-morph";
            label = "TT";
            bindings = <&kp T>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        yy: yy {
            compatible = "zmk,behavior-mod-morph";
            label = "YY";
            bindings = <&kp Y>, <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        uu: uu {
            compatible = "zmk,behavior-mod-morph";
            label = "UU";
            bindings = <&kp U>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        ii: ii {
            compatible = "zmk,behavior-mod-morph";
            label = "II";
            bindings = <&kp I>, <&kp ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        oo: oo {
            compatible = "zmk,behavior-mod-morph";
            label = "OO";
            bindings = <&kp O>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };

        pp: pp {
            compatible = "zmk,behavior-mod-morph";
            label = "PP";
            bindings = <&kp P>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT|MOD_LSFT|MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt RAISE TAB   &kp Q  &kp W  &kp E      &kp R     &kp T        &kp Y    &kp U          &kp I      &kp O    &kp P     &kp BSPC
&lt 1 CAPSLOCK  &kp A  &kp S  &kp D      &kp F     &kp G        &kp H    &kp J          &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT       &kp Z  &kp X  &kp C      &kp V     &kp B        &kp N    &kp M          &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                              &kp LCTRL  &kp LGUI  &kp SPACE    &kp RET  &lt TOP GRAVE  &kp RALT
            >;
        };

        lower_layer {
            bindings = <
&kp PIPE   &kp EXCL          &kp AT_SIGN        &kp HASH      &kp DLLR      &kp PRCNT           &kp CARET  &kp AMPS   &kp STAR       &kp LPAR          &kp RPAR   &kp DEL
&trans     &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE          &kp LEFT   &kp DOWN   &kp UP         &kp RIGHT         &kp COLON  &kp DOUBLE_QUOTES
&kp LSHFT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &kp MINUS  &kp EQUAL  &kp LESS_THAN  &kp GREATER_THAN  &kp MINUS  &trans
                                                &trans        &trans        &trans              &trans     &trans     &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  -  |  7  |  8  |  9  |  +  | BKSP |

            bindings = <
&kp TAB    &kp N1    &kp N2  &kp N3        &kp N4        &kp N5              &kp N6          &kp N7     &kp N8  &kp N9  &kp N0        &kp BSPC
&kp LCTRL  &kp PIPE  &trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE          &kp MINUS       &kp EQUAL  &trans  &trans  &kp COLON     &kp GRAVE
&kp LSHFT  &trans    &trans  &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &kp UNDERSCORE  &kp PLUS   &trans  &trans  &kp QUESTION  &trans
                             &trans        &trans        &trans              &trans          &trans     &trans
            >;
        };

        top_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  BRIGHT_UP  |  BRIGHT_DOWN  |  VOL_DOWN  |  VOL_UP  |  MUTE  |      |  -  |  7  |  8  |  9  |  +  | BKSP |
            // | CTRL |             |               |             |         |        |      |  .  |  4  |  5  |  6  |  -  |  `   |
            // | SHFT |             |              |             |          |        |      |  0  |  1  |  2  |  3  |  *  |  /   |
            //                      |              |             |          |         |     |     |     |

            bindings = <
&kp F1     &kp F2        &kp F3        &kp F4        &kp F5           &kp F6        &kp F7     &kp F8     &kp F9      &kp F10          &kp F11        &kp F12
&kp LCTRL  &out OUT_USB  &trans        &trans        &rgb_ug RGB_TOG  &bl BL_TOG    &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS     &trans         &kp GRAVE
&kp LSHFT  &out OUT_BLE  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0     &bt BT_CLR    &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_MULTIPLY  &kp KP_DIVIDE  &trans
                                       &trans        &trans           &trans        &kp KP_N0  &trans     &kp KP_DOT
            >;
        };
    };
};
